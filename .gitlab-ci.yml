stages:
  - start
  - build
  - dockerize
  - deploy
  
variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  DOCKER_CONTAINER_NAME: "portal_service"
  DOCKER_CONTAINER_PORT: "9012"

  MYSQL_CONTAINER_NAME: "portalService_mysql_container"
  MYSQL_ROOT_PASSWORD: "rootpassword"
  MYSQL_DATABASE: "portal_database"
  MYSQL_USER: "user"
  MYSQL_PASSWORD: "userpassword"
  MYSQL_PORT: "3306"

  DB_HOST: "portalService_mysql_container" # Assuming this is the name of your MySQL container
  DB_PORT: "3306" # Assuming this is the port on which MySQL is listening
  DB_NAME: "portal_database" # Assuming this is the name of your database
  DB_USER: "user" # Assuming this is the username for accessing the database
  DB_PASSWORD: "userpassword" # Assuming this is the password for accessing the database

  NETWORK_NAME: "portal_service_network"

cache:
  paths:
    - .m2/repository/
    - target/

clean:
  image: maven:3.8.1-openjdk-11
  stage: start
  script:
    - mvn $MAVEN_CLI_OPTS -U clean

purge_dependencies:
  image: maven:3.8.1-openjdk-11
  stage: start
  script:
    - mvn $MAVEN_CLI_OPTS dependency:purge-local-repository

build:
  image: maven:3.8.1-openjdk-11
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS install
    
  artifacts:
    paths:
    - target/*.jar
    expire_in: 1 week

build_docker:
  stage: dockerize
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD jenkins.dke.univie.ac.at:4567
  script:
    - docker build --no-cache --tag $CI_REGISTRY_IMAGE:latest -f .docker/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:latest
#    - docker stop $DOCKER_CONTAINER_NAME || true
#    - docker rm $DOCKER_CONTAINER_NAME || true
#    - docker stop $MYSQL_CONTAINER_NAME || true
#    - docker rm $MYSQL_CONTAINER_NAME || true
#    - docker network create $NETWORK_NAME || true # Create network if not exists
#    - docker run -d --network $NETWORK_NAME --name $MYSQL_CONTAINER_NAME -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -e MYSQL_DATABASE=$MYSQL_DATABASE -e MYSQL_USER=$MYSQL_USER -e MYSQL_PASSWORD=$MYSQL_PASSWORD -v database:/var/lib/mysql mysql:latest # Create MySQL container
#    - docker run -d --network $NETWORK_NAME --label io.portainer.accesscontrol.teams=eis2024 --name $DOCKER_CONTAINER_NAME -p $DOCKER_CONTAINER_PORT:8080 -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_NAME=$DB_NAME -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD $CI_REGISTRY_IMAGE:latest # Ensure application container is running

deploy_docker:
  stage: deploy
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD jenkins.dke.univie.ac.at:4567
  script:
    - docker stop $DOCKER_CONTAINER_NAME || true
    - docker rm $DOCKER_CONTAINER_NAME || true
    - docker stop $MYSQL_CONTAINER_NAME || true
    - docker rm $MYSQL_CONTAINER_NAME || true
    - docker network create $NETWORK_NAME || true # Ensure network exists
    - docker run -d --network $NETWORK_NAME --name $MYSQL_CONTAINER_NAME -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -e MYSQL_DATABASE=$MYSQL_DATABASE -e MYSQL_USER=$MYSQL_USER -e MYSQL_PASSWORD=$MYSQL_PASSWORD -v database:/var/lib/mysql mysql:latest # Ensure MySQL container is running
    - docker run -d --network $NETWORK_NAME --label io.portainer.accesscontrol.teams=eis2024 --name $DOCKER_CONTAINER_NAME -p $DOCKER_CONTAINER_PORT:8080 -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_NAME=$DB_NAME -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD $CI_REGISTRY_IMAGE:latest # Ensure application container is running
    - sleep 30 # Wait for MySQL to start
    - docker exec $MYSQL_CONTAINER_NAME mysql -u root -p$MYSQL_ROOT_PASSWORD -e "GRANT ALL PRIVILEGES ON *.* TO 'user'@'%'; FLUSH PRIVILEGES;"

